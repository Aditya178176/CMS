package com.cams;

public class Main {
    public static void main(String[] args) {
        while (true) {
            int choice = UserInput.getInt("Enter your choice[1-3]:\n1. Login\n2. About\n3. Exit\n> ");
            switch (choice) {
                case 1:
                    String username = UserInput.getString("Enter username: ");
                    String password = UserInput.getString("Enter password: ");
                    
                    // Simple hardcoded login check
                    if (username.equals("admin") && password.equals("pass")) {
                        System.out.println("Login successful!");

                        DerivedClasses bank = new DerivedClasses();
                        boolean showMenu = true;

                        while (showMenu) {
                            System.out.println("\nBanking Dashboard:\n1. Deposit\n2. Withdraw\n3. Check Balance\n4. Logout");
                            int dashChoice = UserInput.getInt("Enter choice: ");
                            switch (dashChoice) {
                                case 1:
                                    double depositAmount = UserInput.getDouble("Enter amount to deposit: ");
                                    bank.deposit(depositAmount);
                                    break;
                                case 2:
                                    double withdrawAmount = UserInput.getDouble("Enter amount to withdraw: ");
                                    bank.withdraw(withdrawAmount);
                                    break;
                                case 3:
                                    System.out.println("Balance: â‚¹" + bank.getBalance());
                                    break;
                                case 4:
                                    showMenu = false;
                                    System.out.println("Logged out.");
                                    break;
                                default:
                                    System.out.println("Invalid option!");
                            }
                        }
                    } else {
                        System.out.println("Invalid credentials.");
                    }
                    break;

                case 2:
                    System.out.println("This is a simple bank management system made using Java and OOP concepts.");
                    break;

                case 3:package com.cams.day4;

import com.cams.day4.bean.Employee;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class CrudDemo {

    private static final List<Employee> employees = new ArrayList<>();
    private static final Scanner input = new Scanner(System.in);
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    public CrudDemo() {
        employees.add(new Employee(100,"abc","abc@gmail.com",9878675676L,true,  LocalDate.of(2007,8,17)));
        employees.add(new Employee(101,"xyz","xyz@gmail.com",8798675687L,true,  LocalDate.of(2003,3,10)));
        employees.add(new Employee(102,"mno","mno@gmail.com",7898563416L,false, LocalDate.of(2009,4,8)));
        employees.add(new Employee(103,"pqr","pqr@gmail.com",6898785645L,true,  LocalDate.of(2006,6,21)));
        employees.add(new Employee(104,"lmn","lmn@gmail.com",8754231243L,false, LocalDate.of(2008,9,15)));
    }

    public static void main(String[] args) {
        new CrudDemo(); // seed data

        int choice;
        do {
            printMenu();
            System.out.print("Enter your choice [1-7]\n");
            while (!input.hasNextInt()) {
                System.out.print("Please enter a valid number [1-7]: ");
                input.next();
            }
            choice = input.nextInt();

            switch (choice) {
                case 1: // Add
                    System.out.println();
                    Employee newEmp = readEmployeeFromConsole(true);
                    addEmployee(newEmp);
                    break;

                case 2: // View all
                    System.out.println();
                    viewEmployees(employees);
                    break;

                case 3: // Delete by id
                    System.out.println("\n***************Deleting an Employee By ID****************");
                    System.out.print("Enter ID of the employee to Delete :");
                    int delId = input.nextInt();
                    deleteById(delId);
                    break;

                case 4: // View by id
                    System.out.println("\n***************Employee By ID****************");
                    System.out.print("Enter ID of the employee to View :");
                    int viewId = input.nextInt();
                    viewEmployeeById(viewId);
                    break;

                case 5: // Update by id
                    System.out.println("\n***************Updating an Employee By ID****************");
                    System.out.print("Enter ID of the employee to Update :");
                    int upId = input.nextInt();
                    Employee updated = readEmployeeFromConsole(false);
                    updateById(upId, updated);
                    break;

                case 6: // View active
                    System.out.println();
                    viewActiveEmployees(employees);
                    break;

                case 7: // Exit
                    System.out.println("\nProcess finished with exit code 0");
                    break;

                default:
                    System.out.println("Invalid choice. Please choose between 1 and 7.");
            }

        } while (choice != 7);

        input.close();
    }

    // ---------------- helper methods (UNCHANGED logic, just reused) ----------------

    private static void printMenu() {
        System.out.println();
        System.out.println("\t1. Add Employee");
        System.out.println("\t2. View ALL Employee");
        System.out.println("\t3. Delete Employee BY Id");
        System.out.println("\t4. View Employee By Id");
        System.out.println("\t5. Update Employee By Id");
        System.out.println("\t6. View Active Employees");
        System.out.println("\t7. Exit");
    }

    /** Reads an employee from console. If askId=false (update flow), we won't ask for ID. */
    private static Employee readEmployeeFromConsole(boolean askId) {
        Employee employee = new Employee();

        if (askId) {
            System.out.print("\nEnter Employee ID :");
            employee.setId(input.nextInt());
        }

        System.out.print(" Enter Employee Name :");
        employee.setName(input.next());

        System.out.print(" Enter Employee Email :");
        employee.setEmail(input.next());

        System.out.print(" Enter Employee Mobile :");
        employee.setMobile(input.nextLong());

        System.out.print(" isActive [0/1] :");
        int value = input.nextInt();
        employee.setActive(value == 1);

        System.out.print("Enter Date of Birth [YYYY-MM-DD]:");
        LocalDate date = readDate();
        employee.setBirthDate(date);

        return employee;
    }

    private static LocalDate readDate() {
        while (true) {
            String dateString = input.next();
            try {
                LocalDate date = LocalDate.parse(dateString, FORMATTER);
                System.out.println("Parsed date: " + date);
                return date;
            } catch (DateTimeParseException e) {
                System.out.print("Invalid date format. Please use yyyy-MM-dd: ");
            }
        }
    }

    private static void updateById(int id, Employee employee) {
        employee.setId(id);
        Employee toRemove = null;
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                toRemove = emp;
                break;
            }
        }
        if (toRemove != null) {
            employees.remove(toRemove);
            employees.add(employee);
            System.out.println("Employee with ID :" + id + " is updated!!!");
        } else {
            System.out.println("No employee found with ID :" + id);
        }
    }

    private static void deleteById(int id) {
        Employee toRemove = null;
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                toRemove = emp;
                break;
            }
        }
        if (toRemove != null) {
            employees.remove(toRemove);
            System.out.println("Deleted Employee with ID :" + id);
        } else {
            System.out.println("No employee found with ID :" + id);
        }
    }

    public static void viewEmployees(List<Employee> employees) {
        System.out.print("ID \t Name \t Email \t\t Mobile \t BirthDate \n");
        for (Employee emp : employees)
            System.out.println(emp.getId() + "\t" + emp.getName() + "\t" + emp.getEmail() + "\t" + emp.getMobile() + "\t" + emp.getBirthDate());
    }

    public static void viewActiveEmployees(List<Employee> employees) {
        System.out.print("ID \t Name \t Email \t\t Mobile \t BirthDate \n");
        for (Employee emp : employees) {
            if (emp.isActive())
                System.out.println(emp.getId() + "\t" + emp.getName() + "\t" + emp.getEmail() + "\t" + emp.getMobile() + "\t" + emp.getBirthDate());
        }
    }

    public static void viewEmployeeById(int id) {
        System.out.print("ID \t Name \t Email \t\t Mobile \t BirthDate \n");
        for (Employee emp : employees) {
            if (emp.getId() == id) {
                System.out.println(emp.getId() + "\t" + emp.getName() + "\t" + emp.getEmail() + "\t" + emp.getMobile() + "\t" + emp.getBirthDate());
                return;
            }
        }
        System.out.println("No employee found with ID :" + id);
    }

    public static int addEmployee(Employee emp) {
        int before = employees.size();
        employees.add(emp);
        if (before < employees.size()) {
            System.out.println("New Employee is added Successfully!!!!");
            return 1;
        }
        return 0;
    }
}

                    System.out.println("Exiting application. Thank you!");
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}
